# file: spec/roadman-grammar.ebnf

(* Roadman Programming Language Grammar (EBNF) *)

program ::= { statement } ;

statement ::= declaration_statement
            | assignment_statement
            | expression_statement
            | if_statement
            | loop_statement
            | function_declaration
            | return_statement
            | block_statement
            | switch_statement
            | comment
            | break_statement ;

declaration_statement ::= ('conste' | 'gimme') identifier ( '=' expression )? ';' ;
assignment_statement  ::= identifier '=' expression ';' ;
expression_statement  ::= expression ';' ;

if_statement ::= 'innit' '(' expression ')' block_statement [ 'elseway' ( if_statement | block_statement ) ] ;

loop_statement ::= 'loopz' '(' [ expression ] ')' block_statement ;

break_statement ::= 'stopit' ';' ;

switch_statement ::= 'switchup' '(' expression ')' '{' { case_clause } [ default_clause ] '}' ;
case_clause      ::= 'casez' expression ':' { statement } ;
default_clause   ::= 'defend' ':' { statement } ;

function_declaration ::= 'fam' identifier '(' [ parameter_list ] ')' block_statement ;
parameter_list       ::= identifier { ',' identifier } ;

return_statement ::= 'returnz' [ expression ] ';' ;

block_statement ::= '{' { statement } '}' ;

expression ::= logical_or_expression ;
logical_or_expression ::= logical_and_expression { '||' logical_and_expression } ;
logical_and_expression ::= equality_expression { '&&' equality_expression } ;
equality_expression ::= comparison_expression { ( '==' | '!=' ) comparison_expression } ;
comparison_expression ::= additive_expression { ( '<' | '<=' | '>' | '>=' ) additive_expression } ;
additive_expression ::= multiplicative_expression { ( '+' | '-' ) multiplicative_expression } ;
multiplicative_expression ::= unary_expression { ( '*' | '/' | '%' ) unary_expression } ;
unary_expression ::= ( '!' | '-' ) primary_expression | primary_expression ;

primary_expression ::= literal
                   | identifier
                   | function_call
                   | '(' expression ')' ;

function_call ::= identifier '(' [ argument_list ] ')' ;
argument_list ::= expression { ',' expression } ;

literal ::= number_literal
          | string_literal
          | boolean_literal
          | list_literal ;

number_literal  ::= [ "-" ] digit+ [ "." digit+ ] ;
string_literal  ::= '"' { ( [^"] | '\"' ) } '"' ;
boolean_literal ::= 'true' | 'false' ;
list_literal    ::= '[' [ expression { ',' expression } ] ']' ;

identifier ::= ( 'a'...'z' | 'A'...'Z' | '_' ) { ( 'a'...'z' | 'A'...'Z' | '0'...'9' | '_' ) } ;
digit      ::= '0'...'9' ;

comment ::= single_line_comment | multi_line_comment ;
single_line_comment ::= '//' { [^\n] } ;
multi_line_comment  ::= '/*' { ( [^*] | ( '*' [^/] ) ) } '*/' ;
